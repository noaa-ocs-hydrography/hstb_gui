# This module was generated by the wx.activex.GernerateAXModule class
# (See also the genaxmodule script.)

import wx


class ColorProgress(wx.Panel):
    def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=(-1, 30), style=0, name='ColorProgress'):
        self.bShowPercent = False
        self.bmp = wx.Bitmap(1, 1)
        self.back_bmp = wx.Bitmap(1, 1)
        wx.Panel.__init__(self, parent, id, pos, size, style=wx.SUNKEN_BORDER)
        # wx.lib.agw.pyprogress.ProgressGauge.__init__(self, parent, id=id, pos=pos, size=size)
        self._lc = 0xff0000
        self._rc = 0x0000ff
        self._minv = 0
        self._maxv = 100
        self.position = 50
        self.bOkToDraw = True
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)

        ID_Timer = wx.NewId()
        self.AutoTimer = wx.Timer(self, ID_Timer)
        self.Bind(wx.EVT_TIMER, self.OnTimer, id=ID_Timer)
        self.AutoTimer.Start(300)
        #self.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)

    def OnTimer(self, event=None):
        self.bOkToDraw = True

    def __getleftcolor(self):
        return self._lc

    def __setleftcolor(self, value):
        self._lc = value
        self.CreateCachedGradient()
        self.Refresh()

    def __delleftcolor(self):
        del self._lc
    leftcolori = property(__getleftcolor, __setleftcolor, __delleftcolor, "Left color value of the progress bar")

    def __getrightcolor(self):
        return self._rc

    def __setrightcolor(self, value):
        self._rc = value
        self.CreateCachedGradient()
        self.Refresh()

    def __delrightcolor(self):
        del self._rc
    rightcolori = property(__getrightcolor, __setrightcolor, __delrightcolor, "Right color value of the progress bar")

    def __getpos(self):
        return self._v

    def __setpos(self, value):
        self._v = value
        self.Refresh()

    def __delpos(self):
        del self._v
    position = property(__getpos, __setpos, __delpos, "Position value of the progress bar")

    def __getmin(self):
        return self._minv

    def __setmin(self, value):
        self._minv = value
        self.Refresh()

    def __delmin(self):
        del self._minv
    min = property(__getmin, __setmin, __delmin, "Min value of the progress bar")

    def __getmax(self):
        return self._maxv

    def __setmax(self, value):
        self._maxv = value
        self.Refresh()

    def __delmax(self):
        del self._maxv
    max = property(__getmax, __setmax, __delmax, "Max value of the progress bar")

    def OnMouseDown(self, e):
        print("down")

    @staticmethod
    def IntToColor(col):
        return wx.Colour((col & 0xff0000) >> 16, (col & 0x00ff00) >> 8, col & 0x0000ff)

    @staticmethod
    def ColorToInt(col):
        r, g, b = int(col.Red()), int(col.Green()), int(col.Blue())
        return (r & 0x000000ff) << 16 | (g & 0x000000ff) << 8 | (b & 0x000000ff)

    def GetFirstGradientColour(self):
        """ Returns the first gradient colour. """
        return self.IntToColor(self.leftcolori)

    def SetFirstGradientColour(self, colour):
        """
        Sets the first gradient colour.

        :param `colour`: a valid `wx.Colour` object.
        """

        if not isinstance(colour, wx.Colour):
            colour = wx.NamedColour(colour)

        self.leftcolori = self.ColorToInt(colour)

    def GetSecondGradientColour(self):
        """ Returns the second gradient colour. """
        return self.IntToColor(self.rightcolori)

    def SetSecondGradientColour(self, colour):
        """
        Sets the second gradient colour.

        :param `colour`: a valid `wx.Colour` object.
        """

        if not isinstance(colour, wx.Colour):
            colour = wx.NamedColour(colour)

        self.rightcolori = self.ColorToInt(colour)

    def ShowPercent(self):
        self.bShowPercent = True

    def SetText(self, txt):
        self.msg_txt = txt

    def ShowDosPrint(self):
        self.bDosPrint = True

    def OnEraseBackground(self, event):
        """
        Handles the ``wx.EVT_ERASE_BACKGROUND`` event for L{ProgressGauge}.

        :param `event`: a `wx.EraseEvent` event to be processed.

        :note: This method is intentionally empty to reduce flicker.
        """

        pass

    def CreateCachedGradient(self):
        cx, cy = self.GetClientSize()
        col1 = self.GetFirstGradientColour()
        col2 = self.GetSecondGradientColour()

        # r1, g1, b1 = int(col1.Red()), int(col1.Green()), int(col1.Blue())
        # r2, g2, b2 = int(col2.Red()), int(col2.Green()), int(col2.Blue())

        imagetif = wx.Image(cx, cy)
        self.bmp = imagetif.ConvertToBitmap()

        dc = wx.MemoryDC()
        dc.SelectObject(self.bmp)
        dc.GradientFillLinear(wx.Rect(0, 0, cx + 1, cy + 1), col1, col2)
        # for n in range(cx):
        # dc.SetPen(wx.Pen(wx.Colour(r1+float(r2-r1)*n/float(cx),g1+float(g2-g1)*n/float(cx),b1+float(b2-b1)*n/float(cx)), 1, wx.SOLID))
        # dc.DrawLine(n,0,n, cy-1)

        imagetif = wx.Image(cx, cy)
        self.back_bmp = imagetif.ConvertToBitmap()
        dc.SelectObject(self.back_bmp)
        self.Refresh(eraseBackground=False)

        dc.SelectObject(wx.NullBitmap)

    def OnPaint(self, event):
        dc = wx.PaintDC(self)
        self.DrawProgress(dc)

    def DrawGradient(self, gc, cx, cy, perc):
        if cx != self.bmp.Width or cy != self.bmp.Height:
            self.CreateCachedGradient()
        end = perc * cx
        if end > cx:
            end = cx
        if end < 0:
            end = 0
        gc.DrawBitmap(self.back_bmp, 0, 0, cx, cy)
        gc.DrawBitmap(self.bmp, 0, 0, end, cy)

    def DrawProgress(self, dc):
        if self.bOkToDraw:
            #// Draw the gradient
            xsize, ysize = self.GetClientSize()
            gc = wx.GraphicsContext.Create(dc)
            divisor = float(self.max - self.min)
            if divisor == 0:
                divisor = 100
            perc = float(self.position - self.min) / divisor
            self.DrawGradient(gc, xsize, ysize, perc)

    #        // Show percent indicator if needed
            if self.bShowPercent:
                font = wx.SystemSettings.GetFont(wx.SYS_DEFAULT_GUI_FONT)
                font.SetWeight(wx.BOLD)
                gc.SetFont(font, wx.WHITE)
                try:
                    label = self.msg_txt % (perc * 100.0)
                except TypeError:
                    label = self.msg_txt
                w, h = gc.GetTextExtent(label)
                gc.DrawText(label, xsize / 2 - w / 2, ysize / 2 - h / 2)
            self.bOkToDraw = False


if __name__ == "__main__":
    # if 1:
    from . import Histogram
    from . import ColorProgress
    reload(Histgram)
    reload(ColorProgress)
    win = Histogram.HistFrame(frame, None)
    win.Show()
